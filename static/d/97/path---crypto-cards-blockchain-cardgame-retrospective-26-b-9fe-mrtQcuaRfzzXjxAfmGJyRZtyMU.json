{"data":{"site":{"siteMetadata":{"title":"System Preferences","author":"Tim Stewart"}},"markdownRemark":{"id":"7650db95-54cb-57af-a151-b0c801909171","excerpt":"As a capstone project for my degree at Temple University, me and 5 friends\nendeavored to build a card game whose collectible “cards” were really tokens\non an…","html":"<p>As a capstone project for my degree at Temple University, me and 5 friends\nendeavored to build a card game whose collectible “cards” were really tokens\non an Ethereum blockchain. Check out the source\n<a href=\"https://github.com/nickk752/CryptoCards\">here.</a> In this post I’ll try to\nbreak down mistakes we made, what we did right, and things that I learned\nalong the way. </p>\n<h3>Initial Goals and Adjustments</h3>\n<p>When we first set out, we had some very high hopes for this website, that\nfrom a high level looked like this:</p>\n<ul>\n<li>Users can buy and sell cards on the site via auctions on the blockchain</li>\n<li>Users can combine cards to create new ones</li>\n<li>Users can build decks with their cards, and battle via a browser-based game</li>\n<li>Game logic on the blockchain to prevent cheating</li>\n</ul>\n<p>I’m happy to say we did eventually provide most of that functionality, though\nat the expense of some visual polish. The only goal we had to drop entirely\nwas putting game logic on the blockchain, as research quickly showed it would\nrequire people to spend an unreasonable amount of ether on playing a game, so\nwe marked it as unfeasible. </p>\n<p>Some other smaller features also had to be dropped. We wanted to store the art\nfor the cards on the blockchain as well, but it also appeared unfeasible.\nI was supposed to develop a ranked matchmaking system for players, but had to\ngo for random matches instead, unfortunatly not because it wasn’t feasible but\nbecause I was running out of time, for reasons you’ll find below.</p>\n<h3>Mistakes</h3>\n<blockquote>\n<p>By failing to prepare, you are preparing to fail</p>\n<p> <cite> Benjamin Franklin </cite></p>\n</blockquote>\n<p>There are two big mistakes I want to talk about here, one pertinent to the\nwhole team, and one more on me personally. Both revolve around preperation. </p>\n<p>As a team, we didn’t invest enough effort in planning our project, both through user\nstories and code architechture. While we were required to create stories and post them to\nthe management system the class was using, we often just phoned it in - not\nreally going into the amount of detail we should have. </p>\n<p>This became apparent\nlater on in the development process, when we encountered parts of the system\nthat didn’t work together as they should have even when implimented correctly,\nor that left functionality gaps, forcing us to shove what we needed where it\nwould fit, never a good strategy when dealing with this many moving parts.  </p>\n<p>It was shocking how much smoother things were moving on the chunks with proper design,\njust pick up a task, impliment the required small bit of functionality, run\nthe tests, rinse, and repeat until you logged your hours for the day. In contrast,\nwhen things were ambiguous, even a task that should have been run of the mill could\nrequire you to talk to 2 or 3 different team members about how something should be\ndone. And once a couple such pieces of functionality have been added, if not properly\ndocumented, they can snowball into complicating even well planned parts of the system.</p>\n<p>While we all participated in the design and, to an extent, the implimentation of the\nentire project, early on we split into three two-person teams, one focused on the\nsmart contracts, one on the main website, and one on the game. I was on the game team.</p>\n<p>The more personal mistake I want to talk about involves a lack of preperation with regards\nto developing multiplayer browser games. While I did some small demos and tutorials to\nget a feel for the tools involved (<a href=\"https://phaser.io/\">phaser</a> and\n<a href=\"https://socket.io/\">socket.io</a> mostly) I didn’t do much research into the common\npatterns and best practices used in the design of such programs.</p>\n<p>This meant when I initially designed\nthe structure of the games objects and interactions, not only were my chunks not as\nefficient and self-contained as they easily could have been - I also aliented myself\nfrom a good portion of the resources available to me. No one online can help me\nunderstand why my janky resource system sometimes doesn’t update when it should, when\nnone of my events to trigger such an update are patterns used by others. If I had followed\nthrough with the tutorials I started instead of just stopping when I knew I could get\nthe functionality I wanted, I would be able to continue to draw on them. </p>\n<p>Another related problem was that this was my first real exposure to anything more than\ntrivial javascript. So while I did spend a good deal of time researching and learning\nthroughout the project, a lot of that was focused on learning the in’s and out’s of\nJS, and ES6 in particular. I did come out of it with a much more positive view of JS\nthan I had before though. I used to think of it as kind of a joke, more familiar with\nit’s meme-y quirks surrounding type coercion than I was with </p>\n<h3>What Went Well</h3>","frontmatter":{"title":"CryptoCards - A Blockchain Cardgame Retrospective","date":"February 17, 2019"}}},"pageContext":{"slug":"/CryptoCards-Blockchain-Cardgame-Retrospective/","previous":{"fields":{"slug":"/Hello-World/"},"frontmatter":{"title":"Hello World!"}},"next":{"fields":{"slug":"/Frequency-Visualizer-Retrospective/"},"frontmatter":{"title":"Frequency Visualizer Retrospective"}}}}