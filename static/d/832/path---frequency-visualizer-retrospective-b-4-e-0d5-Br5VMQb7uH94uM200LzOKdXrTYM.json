{"data":{"site":{"siteMetadata":{"title":"System Preferences","author":"Tim Stewart"}},"markdownRemark":{"id":"116f9a56-bed2-5170-a5c4-17b8d4cd0556","excerpt":"One of my favorite projects, my friend Quentin and I spent a few weeks\nmy junior year building an audio frequency visualizer. While it ended up\nbeing on the…","html":"<p>One of my favorite projects, my friend Quentin and I spent a few weeks\nmy junior year building an audio frequency visualizer. While it ended up\nbeing on the smaller side codebase wise, it took a lot of research and\nmany revisions to come to fruition. Check out the <a href=\"https://github.com/TimtheStew/AudioSpectrumVisualizer\">source</a></p>\n<p>Since both Quentin and I have a deep love of music, and I’ve been fascinated\nwith the Fast Fourier Transform and it’s plethora of applications since my\nbusiness school days, it seemed a natural choice to build some sort of spectrum\nvisualizer. The other main idea that seemed appealing was doing something with a cluster\nof Raspberry Pis, but we weren’t sure what.</p>\n<p><img src=\"/sine-tones-4094d5c2b6fc461b35580ca046d859e4.gif\" alt=\"sine-tones\"></p>\n<p align=center>\n    <cite> Sine tones, increasing in frequency and decreasing in volume </cite>\n</p>\n<h3>Initial Goals</h3>\n<p>This was one of the first times, aside from hackathons or personal projects,\nwhere we as students were given the go ahead to create or choose our own\nprojects. And so, like the naive young fools we were, we set ourselves some\nvery ambitious goals. Also, as we were still really keen on that Raspberry Pi\nidea, we managed to shove them in somewhere too. We wanted to build rhythm game with:</p>\n<ul>\n<li>\n<p>Multiple color-schemes and display modes</p>\n<ul>\n<li>tap keys or click moving objects in time with music, etc.</li>\n</ul>\n</li>\n<li>Using <a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/\">OpenGL 4</a> to display 3D graphics</li>\n<li>Using MIT’s <a href=\"http://www.fftw.org/\">fftw</a> to perform the analysis</li>\n<li>All of this was to happen on a Raspberry Pi, and be controlled wirelessly (so you could\nplug it into a TV and play from your couch)</li>\n</ul>\n<h3>Mistake One: Adjusting Goals for the Real-World</h3>\n<p>Unfortunately, we quickly found out that not only were most of those goals unfeasible in\nthe time we had, they were also way over our heads technically. After about a week and a\nhalf of bashing our heads against the wall that is OpenGl 4’s programmable shaders and pipeline,\nwe decided to instead used the fixed-function pipeline of OpenGL 2, and to do 2D graphics with it, as\nit seemed much more conquerable.  Neither of us had ever\ndeveloped a game at all, let alone in something as low level as OpenGL, so the interactive\ncomponent went as well. And as relative newbies to the FFT signal processing scene, we opted\nfor the more beginner friendly FFT module from <a href=\"http://www.numpy.org/\">NumPy</a>.</p>","frontmatter":{"title":"Frequency Visualizer Retrospective","date":"February 17, 2019"}}},"pageContext":{"slug":"/Frequency-Visualizer-Retrospective/","previous":{"fields":{"slug":"/CryptoCards-Blockchain-Cardgame-Retrospective/"},"frontmatter":{"title":"CryptoCards - A Blockchain Cardgame Retrospective"}},"next":{"fields":{"slug":"/YFS-Retrospective/"},"frontmatter":{"title":"YFS - A Distributed Filesystem Retrospective"}}}}