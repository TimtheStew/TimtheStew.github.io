{"data":{"site":{"siteMetadata":{"title":"Engineering Schmengineering","author":"Tim Stewart"}},"markdownRemark":{"id":"e37085c6-1e47-5db0-b0ad-dba0f2289b5a","excerpt":"For about the past month, my friend Atta and I have been working on\na new project. We’ve wanted to build something together for some time\nbut kept throwing…","html":"<p>For about the past month, my friend Atta and I have been working on\na new project. We’ve wanted to build something together for some time\nbut kept throwing around ideas without actually starting. So finally\nwe just picked one that interested us both, and went for it.</p>\n<p>Umbrella Chat is going to be an end-to-end encrypted chat service built\nas a 12-factor web-app. <a href=\"https://github.com/TimtheStew/umbrella-chat\">Check out the source here!</a></p>\n<h2>The Stack</h2>\n<p>On the back-end, we’re using Apollo Server, for ease of setting up\na GraphQL API, and Sequelize as an ORM tool for our Postgres DB.</p>\n<p>In the front, we’re using webpack to bundle our assets, babel to maintain\ncompatibility, React to display a UI, and Redux to manage our state.</p>\n<p>That all sounds great! Modern and buzzword-y! But what does it mean?</p>\n<p>Well strap in, and let me tell you…</p>\n<h3>Back-End</h3>\n<p><a href=\"https://graphql.org/\">GraphQL</a> is an alternative to traditional RESTful\nAPI’s, developed at facebook. The basic idea behind it is that instead of\nhaving lots of endpoints for very specific queries, you have one\n“smart” endpoint, that delivers just the data the client needs, and in whatever\nconfiguration they need it. This cuts down on data processing on the front end, and\nmeans you don’t have to write a new query every time your front-end needs a\ndifferent collection of data.</p>\n<p>A GraphQL server is a layer that sits between your front end and your data store(s).\nIt works with three main components: Schemas, Queries, and Resolvers.</p>\n<p>GraphQL’s typed <strong>schemas</strong> and <a href=\"https://www.apollographql.com/docs/apollo-server/essentials/schema#sdl\">Schema Definition Language</a>\nare at the core of how it functions. A schema is how you describe your data and\nit’s types to graphql. SDL offers several scalar types (bools, ints, strings, etc.)\nand some abstractions, like objects, to allow you to define your data in terms\nof types and relationships. For instance a rudimentary Chat definition might\nlook like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Chat<span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span>\n    name<span class=\"token punctuation\">:</span> String\n    users<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n    createdAt<span class=\"token punctuation\">:</span> String\n    updatedAt<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are other things you’ll probably want to include in schemas, such as extensions\nto the Query and Mutation types, but I won’t get into those here. </p>\n<p><strong>Queries</strong> are how you ask for the data you want, and are store-agnostic! It doesn’t\nmatter where what you need comes from, GraphQL takes care of that for you. They can\nalso take arguments, which plays into that “only the data you need” idea.\nSo lets say I wanted a chat with a particular id, my query might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">query<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">chat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"someUUID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        name\n        users\n        updatedAt\n        createdAt\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since both queries and schemas don’t care about where things come from, you figure\nsomething has to right? Thats where <strong>resolvers</strong> come in! A resolver does what\nit says on the tin - it resolves abstract queries into concrete data by following\nthe procedures you lay out for it. More simply, it tells GraphQL where and how to look\nfor what it wants.</p>\n<p>GraphQL is really just a specification, and can be implemented in any language. For this\nproject the implementation we’re using is\n<a href=\"https://www.apollographql.com/docs/apollo-server/\">Apollo Server</a> which allows for\neasy set-up and auto-documenting of the API your GraphQL server uses. It also\noffers compatibility with a wide range of sources\n(such as a Postgres DB) and is popular, well-documented and well-maintained. </p>\n<p>For our database, we’re using <a href=\"https://www.postgresql.org/\">PostgreSQL</a>, which\nis an open source object-relational database system. It has an emphasis on\nextensibility and standards compliance, as well as a wide support base, given\nit is the DB of choice for many individuals and organizations. </p>\n<p>For ease of querying our database, we’re using an ORM, or Object Relational Mapping\n(library) called <a href=\"http://docs.sequelizejs.com/\">Sequelize</a>. Sequelize is a\npromise based Javascript ORM, that supports a handful of popular DBs such\nas MySQL, Microsoft SQL Server, <strong>Postgres</strong>, and SQLite. It’s purpose is to hide the\nmechanics of SQL querying behind an object model. So instead of\nwriting a statement like </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> chats <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'My Squad'</span> </code></pre></div>\n<p>you would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Chat<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token punctuation\">:</span> <span class=\"token string\">'My Squad'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, with such a trivial example, it might seem we’ve actually made things\nmore complicated, but as queries grow in demand or generality, they can become quite tricky to write\noptimally, and that is where Sequelize really shines. It means that I don’t\nhave to be a SQL master to use fast queries, and the object model can greatly\nsimplify other more ungainly selections. However, since Sequelize isn’t familiar\nwith the ins and outs of my data, I can’t expect it be as good as an actual SQL master\nat writing queries, but I can expect it to be better than me.</p>\n<p>This object model is how our GraphQL resolvers will return the data they need to.</p>\n<p>Using an ORM allows us to employ some OOP techniques to better manage and define our data,\neven at the database level. Also, because it abstracts the DB, we could switch to any other DB supported by\nSequelize down the line without too much hassle. </p>\n<h3>Front-End</h3>\n<p>The front of our front-end is <a href=\"https://reactjs.org/\">React</a>. React is a two-part\nframework for creating UI’s in a browser or “browser-like” environment. One part\nis React itself, which uses components, and their associated objects like props, to\ndescribe at once both the visual and functional aspects of a UI. The other part is <a href=\"https://reactjs.org/docs/react-dom.html\">React-DOM,</a>\nwhich is a virtual <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>that allows for faster loading and changing of the page through optimized DOM management.</p>\n<p>If you’re familiar with android development, React components are very similar to activities and fragments, in that they’re modular pieces which represent screens or sections of screens. For example,\nyou might have a page level component for a login page, which contains several other\ncomponents such as a header, footer, loginModal, etc. It may also contain other non-visual components,\nwhich just perform some background logic,\nthese are more akin to an android service. And since all these components are modular, you can reuse them,\nso all of your page level components (often called containers, or views, or something similar) can use the\nsame header and footer components. </p>\n<p>Again, similar to android, these components will usually be subclasses of the main React.Component class, and follow a lifecycle, with callbacks corresponding to\nvarious points in that lifecycle, such as when they are about to mount, or just have mounted. </p>\n<p>One of the core ideas of React is the marriage of display logic and functionality. To this end,\nReact uses something called <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a> which\nis an extension for Javascript that allows for the direct embedding of markup syntax into Javascript.\nJsx is how components are defined.</p>\n<p>While React has built-in functionality for managing the state of each component in your application,\nit can get head-scratchingly complicated as your application grows. Some component updates\nyour data, which updates a couple other components, which updates your data, which updates other components…</p>\n<p>To reduce this headache, we use a state container called <a href=\"https://redux.js.org/\">Redux</a>. So that\ninstead of having to micro-manage the state of our application at a per-component level, we\ncan do it all in one place - the redux store. </p>\n<p>The store contains the state of our entire application, usually in something like a map, which it doles\nout as props to our various components. Whenever our components trigger an Action, redux reduces that\naction to changes in the store, which will cause our components to update with new props. </p>\n<p>Our front-end is connected to the backend using <a href=\"https://www.apollographql.com/docs/react/\">Apollo Client</a>.\nIt has some very convienent features,\nespecially when used with React. It lets us create Query Components, which\nencapsulates a lot of data-fetching tasks nicely into a pattern that fits well\nwith React and Redux. It also ships with an intelligent cache.</p>\n<p>On the back-end of the front end, we use some pre-processing to turn all our code into\na website. We have a couple smaller pre-processerers like one for SASS, which lets us write\nmore robust CSS. A major pre-processor is <a href=\"https://babeljs.io/\">babel</a> which is really\na transpiler. It lets us write modern ES6 javascript, which is not yet fully supported\nby all browsers, by converting it into ES5 javascript that is. For example it would turn\nthis code, utilizing lambda functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> odds <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>into this, which doesn’t:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> odds <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> v <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All of this preprocessing, and more (such as minification), is handled by <a href=\"https://webpack.js.org/\">WebPack</a>.</p>\n<p>WebPack, along with providing all the task-running functionality described above (applying\nthose processors in a specified order), also builds a dependency graph of our all our\nstatic and non-static assets, from CSS to images. I’m not going to go too deep into it here,\nthere are plenty of great resources describing the webpack process all over the web. </p>\n<p>The long\nand the short of it is that webpack allows us require() in the browser. This means instead\nof having to hand order concatened javascript files, and <strong>rely on global variables</strong> we can make use of the modulization\nprovided by require(). Webpack will assemble all our javascript into\nthe minimal amount of files, and, with the help of an HTML plugin, directly insert those\nscripts in the right order into a template HTML file. It will take all these files,\nmodified to properly include the static assets, and put them into a directory for\ndistribution. Boom, website!</p>\n<h3>The End</h3>\n<p>I hope you’ve enjoyed the read. Stay tuned for the next post where I’ll go over\nwhat it means for this app to be 12 factor!</p>","frontmatter":{"title":"New Project! Umbrella Chat - an Encrypted Chat Service","date":"March 27, 2019"}}},"pageContext":{"slug":"/Umbrella-chat-announcement/","previous":{"fields":{"slug":"/YFS-Retrospective/"},"frontmatter":{"title":"YFS - A Distributed Filesystem Retrospective - WIP"}},"next":null}}