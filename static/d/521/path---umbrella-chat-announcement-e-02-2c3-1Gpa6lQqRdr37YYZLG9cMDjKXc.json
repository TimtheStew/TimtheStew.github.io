{"data":{"site":{"siteMetadata":{"title":"Engineering Schmengineering","author":"Tim Stewart"}},"markdownRemark":{"id":"b950a7b7-3dcb-50a0-964a-135e825a08ab","excerpt":"For about the past month, my friend Atta and I have been working on\na new project. We’ve wanted to build something together for some time\nbut kept throwing…","html":"<p>For about the past month, my friend Atta and I have been working on\na new project. We’ve wanted to build something together for some time\nbut kept throwing around ideas without actually starting. So finally\nwe just picked one that interested us both, and went for it.</p>\n<p>Umbrella Chat is going to be an end-to-end encrypted chat service built\nas a 12-factor web-app.</p>\n<h3>The Back-End</h3>\n<p>On the back end, we’re using Apollo Server, for ease of setting up\na GraphQL API, and Sequelize as an ORM tool for our Postgres DB.</p>\n<p>That sounds great! Modern and efficient! But what does it mean?</p>\n<p><a href=\"https://graphql.org/\">GraphQL</a> is an alternative to traditional RESTful\nAPI’s, developed at facebook. The basic idea behind it is that instead of\nhaving lots of endpoints for very specific queries, you have only a couple\n“smart” endpoints, that deliver just the data the client needs, and in whatever\nmanner they need it. This cuts down on data processing on the front end, and\nturns getting your data into more of a function call than a data dump.</p>\n<p>A GraphQL server is a layer that sits between your front end and your data store(s).\nIt works with three main components: Schemas, Queries, and Resolvers.</p>\n<p>GraphQL’s typed schemas and <a href=\"https://www.apollographql.com/docs/apollo-server/essentials/schema#sdl\">Schema Definition Language</a>\nare at the core of how it functions. A schema is how you describe your data and\nit’s types to graphql.</p>\n<p>Queries are how you ask for the data you want, and are store-agnostic! It doesn’t\nmatter where what you need comes from, GraphQL takes care of that for you. They can\nalso take arguments, which plays into that “only the data you need” idea.\nSo lets say I wanted a chat with a particular id, my query my look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query{\n    chat(id: &quot;someUUID&quot;){\n        name\n        users\n        updatedAt\n        createdAt\n    }\n}</code></pre></div>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server/\">Apollo Server</a> implements\nthe GraphQL specification, and allows for easy set-up and auto-documenting of the\nAPI your GraphQL server uses. </p>","frontmatter":{"title":"New Project! Umbrella Chat - an Encrypted Chat Service","date":"March 20, 2019"}}},"pageContext":{"slug":"/Umbrella-Chat-Announcement/","previous":{"fields":{"slug":"/YFS-Retrospective/"},"frontmatter":{"title":"YFS - A Distributed Filesystem Retrospective - WIP"}},"next":null}}